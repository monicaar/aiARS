#ARS_ai

#importing modules
import os
import numpy as np

#setting the hyper parameters

#parameters having fixed values
class Hp():
    def __init__(self):#used to refer to object inside class
        self.nb_steps = 1000#number of training loops for updating our perceptron
        self.episode_length = 1000#max time for the ai
        self.learning_rate = 0.02#the rate of ai learning
        self.nb_directions = 16#for getting the reward
        self.nb_best_directions = 16#for getting the best reward
        assert self.nb_best_directions <= self.nb_directions
        self.noise = 0.03#standard deviation 
        self.seed = 1#config of the environment
        self.env_name = ''#name of environment

#NORMALISING THE STATES

class Normaliser():
    
    def __init__(self,nb_inputs):
        self.n = np.zeros(nb_inputs)#initializing all values to 0
        self.mean = np.zeros(nb_inputs)
        self.mean_diff = np.zeros(nb_inputs)
        self.var = np.zeros(nb_inputs)
        
    def observe(self,x):
        self.n += 1.
        last_mean = self.mean.copy()
        self.mean += (x-last_mean)/self.n
        self.mean_diff += (x-last_mean)*(x-self.mean)
        self.var = (self.mean_diff)/(self.n).clip(min = 1e-2)
    #online normalisation of states here
    def normalise(self,inputs):
        obs_mean = self.mean
        obs_std = np.sqrt(self.var)#standard deviation for normalising states
        return (inputs-obs_mean) / obs_std#normalised values at time t
    
class policy():
    def __init__(self,input_size,output_size):
        self.theta = np.zeros((output_size,input_size)) #self.theta is the weight matrix
        #initialising weight matrix to zero
    def evaluate(self,input,delta=None,direction=None):
        if direction is None:
            return self.theta.dot(input)
        elif direction == 'positive':#positive direction
            return (self.theta+hp.noise*delta).dot(input)#formula for output of action in positive direction
        else: #opposite direction
            return (self.theta-hp.noise*delta).dot(input)
    def sample_deltas(self):
        return [np.random.randn(*self.theta.shape) for i in range(hp.nb_directions)] #for getting the dimensions of delta same as theta
        #this has to be returned in 16 directions which makes it a list
        #randm method is in numpy library
        
        
    # updating the matrix with the pertubations
    #calculating gradient descent
    def update(self,rollouts,sigma_r):
        step = np.zeros(self.theta.shape)
        for r_pos,r_neg,d in rollouts:
            step += (r_pos-r_neg) * d
        self.theta += (hp.learning_rate)/(hp.nb_best_directions*sigma_r)*step
        
        
       
